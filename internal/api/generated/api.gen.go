// langkit-api v1.0.0 8e875e2b45993ec0a21b940ac9f60bf2545b4291
// --
// Code generated by webrpc-gen@v0.26.1 with golang generator. DO NOT EDIT.
//
// webrpc-gen -schema=/home/voiduser/go/src/langkit/api/schemas/api.ridl -target=golang -pkg=generated -server -client -out=../internal/api/generated/api.gen.go
package generated

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
)

const WebrpcHeader = "Webrpc"

const WebrpcHeaderValue = "webrpc@v0.26.1;gen-golang@v0.19.0;langkit-api@v1.0.0"

// WebRPC description and code-gen version
func WebRPCVersion() string {
	return "v1"
}

// Schema version of your RIDL schema
func WebRPCSchemaVersion() string {
	return "v1.0.0"
}

// Schema hash generated from your RIDL schema
func WebRPCSchemaHash() string {
	return "8e875e2b45993ec0a21b940ac9f60bf2545b4291"
}

type WebrpcGenVersions struct {
	WebrpcGenVersion string
	CodeGenName      string
	CodeGenVersion   string
	SchemaName       string
	SchemaVersion    string
}

func VersionFromHeader(h http.Header) (*WebrpcGenVersions, error) {
	if h.Get(WebrpcHeader) == "" {
		return nil, fmt.Errorf("header is empty or missing")
	}

	versions, err := parseWebrpcGenVersions(h.Get(WebrpcHeader))
	if err != nil {
		return nil, fmt.Errorf("webrpc header is invalid: %w", err)
	}

	return versions, nil
}

func parseWebrpcGenVersions(header string) (*WebrpcGenVersions, error) {
	versions := strings.Split(header, ";")
	if len(versions) < 3 {
		return nil, fmt.Errorf("expected at least 3 parts while parsing webrpc header: %v", header)
	}

	_, webrpcGenVersion, ok := strings.Cut(versions[0], "@")
	if !ok {
		return nil, fmt.Errorf("webrpc gen version could not be parsed from: %s", versions[0])
	}

	tmplTarget, tmplVersion, ok := strings.Cut(versions[1], "@")
	if !ok {
		return nil, fmt.Errorf("tmplTarget and tmplVersion could not be parsed from: %s", versions[1])
	}

	schemaName, schemaVersion, ok := strings.Cut(versions[2], "@")
	if !ok {
		return nil, fmt.Errorf("schema name and schema version could not be parsed from: %s", versions[2])
	}

	return &WebrpcGenVersions{
		WebrpcGenVersion: webrpcGenVersion,
		CodeGenName:      tmplTarget,
		CodeGenVersion:   tmplVersion,
		SchemaName:       schemaName,
		SchemaVersion:    schemaVersion,
	}, nil
}

//
// Common types
//

type LanguageValidation struct {
	Tag    string `json:"tag"`
	Single bool   `json:"single"`
}

type ValidationResponse struct {
	Valid       bool    `json:"valid"`
	StandardTag string  `json:"standardTag"`
	Error       *string `json:"error"`
}

type LanguageRequirements struct {
	StandardTag      string  `json:"standardTag"`
	IsValid          bool    `json:"isValid"`
	RequiresDocker   bool    `json:"requiresDocker"`
	RequiresInternet bool    `json:"requiresInternet"`
	Error            *string `json:"error"`
}

type RomanizationScheme struct {
	Name        string `json:"name"`
	Description string `json:"description"`
	Provider    string `json:"provider"`
}

type RomanizationStylesResponse struct {
	Schemes           []*RomanizationScheme `json:"schemes"`
	DockerUnreachable bool                  `json:"dockerUnreachable"`
	DockerEngine      string                `json:"dockerEngine"`
	NeedsDocker       bool                  `json:"needsDocker"`
	NeedsScraper      bool                  `json:"needsScraper"`
}

type DockerStatus struct {
	Available bool    `json:"available"`
	Version   string  `json:"version"`
	Engine    string  `json:"engine"`
	Error     *string `json:"error"`
}

type InternetStatus struct {
	Online bool `json:"online"`
	// milliseconds
	Latency int64   `json:"latency"`
	Error   *string `json:"error"`
}

type FFmpegStatus struct {
	Available bool    `json:"available"`
	Version   string  `json:"version"`
	Path      string  `json:"path"`
	Error     *string `json:"error"`
}

type MediaInfoStatus struct {
	Available bool    `json:"available"`
	Version   string  `json:"version"`
	Path      string  `json:"path"`
	Error     *string `json:"error"`
}

type DownloadResult struct {
	Path  string  `json:"path"`
	Error *string `json:"error"`
}

type DryRunConfig struct {
	Enabled        bool             `json:"enabled"`
	DelayMs        int32            `json:"delayMs"`
	ProcessedCount int32            `json:"processedCount"`
	NextErrorIndex int32            `json:"nextErrorIndex"`
	NextErrorType  *string          `json:"nextErrorType"`
	ErrorPoints    map[int32]string `json:"errorPoints"`
}

type DryRunStatus struct {
	Enabled        bool             `json:"enabled"`
	DelayMs        int32            `json:"delayMs"`
	ProcessedCount int32            `json:"processedCount"`
	NextErrorIndex int32            `json:"nextErrorIndex"`
	NextErrorType  *string          `json:"nextErrorType"`
	ErrorPoints    map[int32]string `json:"errorPoints"`
}

type LogEntry struct {
	// Log level (-1=TRACE, 0=DEBUG, 1=INFO, 2=WARN, 3,4=ERROR, 5=FATAL)
	Lvl *float64 `json:"lvl"`
	// Log message
	Msg *string `json:"msg"`
	// Component name
	Comp *string `json:"comp"`
	// Context information
	Ctx map[string]interface{} `json:"ctx"`
	// Operation name
	Op *string `json:"op"`
	// Session ID
	Sid *string `json:"sid"`
}

type EventThrottlingStatus struct {
	Enabled         bool    `json:"enabled"`
	CurrentRate     float64 `json:"currentRate"`
	CurrentInterval int32   `json:"currentInterval"`
	Error           *string `json:"error"`
}

// STT (Speech-to-Text) types
type STTModelUIInfo struct {
	Name               string `json:"name"`
	DisplayName        string `json:"displayName"`
	Description        string `json:"description"`
	ProviderName       string `json:"providerName"`
	IsDepreciated      bool   `json:"isDepreciated"`
	IsRecommended      bool   `json:"isRecommended"`
	TakesInitialPrompt bool   `json:"takesInitialPrompt"`
	IsAvailable        bool   `json:"isAvailable"`
}

type STTModelsResponse struct {
	Models    []*STTModelUIInfo `json:"models"`
	Names     []string          `json:"names"`
	Available bool              `json:"available"`
	Suggested string            `json:"suggested"`
}

// LLM (Summary) provider types
type ProviderInfo struct {
	Name        string  `json:"name"`
	DisplayName string  `json:"displayName"`
	Description string  `json:"description"`
	Status      *string `json:"status"`
	Error       *string `json:"error"`
}

type SummaryProvidersResponse struct {
	Providers []*ProviderInfo `json:"providers"`
	Names     []string        `json:"names"`
	Available bool            `json:"available"`
	Suggested string          `json:"suggested"`
	Status    string          `json:"status"`
	Message   *string         `json:"message"`
}

type ModelInfo struct {
	Id           string `json:"id"`
	Name         string `json:"name"`
	Description  string `json:"description"`
	ProviderName string `json:"providerName"`
}

type SummaryModelsResponse struct {
	Models    []*ModelInfo `json:"models"`
	Names     []string     `json:"names"`
	Available bool         `json:"available"`
	Suggested string       `json:"suggested"`
	Status    string       `json:"status"`
	Message   *string      `json:"message"`
}

type APIKeys struct {
	Replicate  *string `json:"replicate"`
	ElevenLabs *string `json:"elevenLabs"`
	OpenAI     *string `json:"openAI"`
	OpenRouter *string `json:"openRouter"`
	Google     *string `json:"google"`
}

type EventThrottling struct {
	Enabled bool `json:"enabled"`
	// milliseconds
	MinInterval int32 `json:"minInterval"`
	// milliseconds
	MaxInterval int32 `json:"maxInterval"`
}

type Settings struct {
	ApiKeys                *APIKeys `json:"apiKeys"`
	TargetLanguage         string   `json:"targetLanguage"`
	NativeLanguages        string   `json:"nativeLanguages"`
	EnableGlow             bool     `json:"enableGlow"`
	ShowLogViewerByDefault bool     `json:"showLogViewerByDefault"`
	MaxLogEntries          int32    `json:"maxLogEntries"`
	MaxAPIRetries          int32    `json:"maxAPIRetries"`
	MaxWorkers             int32    `json:"maxWorkers"`
	// seconds
	TimeoutSep int32 `json:"timeoutSep"`
	// seconds
	TimeoutSTT int32 `json:"timeoutSTT"`
	// seconds
	TimeoutDL                        int32            `json:"timeoutDL"`
	LogViewerVirtualizationThreshold int32            `json:"logViewerVirtualizationThreshold"`
	EventThrottling                  *EventThrottling `json:"eventThrottling"`
}

type StatisticsUpdate struct {
	Updates map[string]interface{} `json:"updates"`
}

type IncrementResult struct {
	NewValue int32 `json:"newValue"`
}

var methods = map[string]method{
	"/rpc/LanguageService/ValidateLanguage": {
		name:        "ValidateLanguage",
		service:     "LanguageService",
		annotations: map[string]string{},
	},
	"/rpc/LanguageService/GetLanguageRequirements": {
		name:        "GetLanguageRequirements",
		service:     "LanguageService",
		annotations: map[string]string{},
	},
	"/rpc/LanguageService/NeedsTokenization": {
		name:        "NeedsTokenization",
		service:     "LanguageService",
		annotations: map[string]string{},
	},
	"/rpc/LanguageService/GetRomanizationStyles": {
		name:        "GetRomanizationStyles",
		service:     "LanguageService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/CheckDockerAvailability": {
		name:        "CheckDockerAvailability",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/CheckInternetConnectivity": {
		name:        "CheckInternetConnectivity",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/CheckFFmpegAvailability": {
		name:        "CheckFFmpegAvailability",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/CheckMediaInfoAvailability": {
		name:        "CheckMediaInfoAvailability",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/DownloadFFmpeg": {
		name:        "DownloadFFmpeg",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DependencyService/DownloadMediaInfo": {
		name:        "DownloadMediaInfo",
		service:     "DependencyService",
		annotations: map[string]string{},
	},
	"/rpc/DryRunService/SetConfig": {
		name:        "SetConfig",
		service:     "DryRunService",
		annotations: map[string]string{},
	},
	"/rpc/DryRunService/InjectError": {
		name:        "InjectError",
		service:     "DryRunService",
		annotations: map[string]string{},
	},
	"/rpc/DryRunService/GetStatus": {
		name:        "GetStatus",
		service:     "DryRunService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/BackendLogger": {
		name:        "BackendLogger",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/BackendLoggerBatch": {
		name:        "BackendLoggerBatch",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/SetTraceLogs": {
		name:        "SetTraceLogs",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/GetTraceLogs": {
		name:        "GetTraceLogs",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/RecordWasmState": {
		name:        "RecordWasmState",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/RequestWasmState": {
		name:        "RequestWasmState",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/ExportDebugReport": {
		name:        "ExportDebugReport",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/SetEventThrottling": {
		name:        "SetEventThrottling",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/LoggingService/GetEventThrottlingStatus": {
		name:        "GetEventThrottlingStatus",
		service:     "LoggingService",
		annotations: map[string]string{},
	},
	"/rpc/ModelService/GetAvailableSTTModelsForUI": {
		name:        "GetAvailableSTTModelsForUI",
		service:     "ModelService",
		annotations: map[string]string{},
	},
	"/rpc/ModelService/RefreshSTTModelsAfterSettingsUpdate": {
		name:        "RefreshSTTModelsAfterSettingsUpdate",
		service:     "ModelService",
		annotations: map[string]string{},
	},
	"/rpc/ModelService/GetAvailableSummaryProviders": {
		name:        "GetAvailableSummaryProviders",
		service:     "ModelService",
		annotations: map[string]string{},
	},
	"/rpc/ModelService/GetAvailableSummaryModels": {
		name:        "GetAvailableSummaryModels",
		service:     "ModelService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/InitSettings": {
		name:        "InitSettings",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/LoadSettings": {
		name:        "LoadSettings",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/SaveSettings": {
		name:        "SaveSettings",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/LoadStatistics": {
		name:        "LoadStatistics",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/UpdateStatistics": {
		name:        "UpdateStatistics",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
	"/rpc/SettingsService/IncrementStatistic": {
		name:        "IncrementStatistic",
		service:     "SettingsService",
		annotations: map[string]string{},
	},
}

func WebrpcMethods() map[string]method {
	res := make(map[string]method, len(methods))
	for k, v := range methods {
		res[k] = v
	}

	return res
}

var WebRPCServices = map[string][]string{
	"LanguageService": {
		"ValidateLanguage",
		"GetLanguageRequirements",
		"NeedsTokenization",
		"GetRomanizationStyles",
	},
	"DependencyService": {
		"CheckDockerAvailability",
		"CheckInternetConnectivity",
		"CheckFFmpegAvailability",
		"CheckMediaInfoAvailability",
		"DownloadFFmpeg",
		"DownloadMediaInfo",
	},
	"DryRunService": {
		"SetConfig",
		"InjectError",
		"GetStatus",
	},
	"LoggingService": {
		"BackendLogger",
		"BackendLoggerBatch",
		"SetTraceLogs",
		"GetTraceLogs",
		"RecordWasmState",
		"RequestWasmState",
		"ExportDebugReport",
		"SetEventThrottling",
		"GetEventThrottlingStatus",
	},
	"ModelService": {
		"GetAvailableSTTModelsForUI",
		"RefreshSTTModelsAfterSettingsUpdate",
		"GetAvailableSummaryProviders",
		"GetAvailableSummaryModels",
	},
	"SettingsService": {
		"InitSettings",
		"LoadSettings",
		"SaveSettings",
		"LoadStatistics",
		"UpdateStatistics",
		"IncrementStatistic",
	},
}

//
// Server types
//

type LanguageService interface {
	ValidateLanguage(ctx context.Context, validation *LanguageValidation) (*ValidationResponse, error)
	GetLanguageRequirements(ctx context.Context, languageTag string) (*LanguageRequirements, error)
	NeedsTokenization(ctx context.Context, language string) (bool, error)
	GetRomanizationStyles(ctx context.Context, languageCode string) (*RomanizationStylesResponse, error)
}

type DependencyService interface {
	CheckDockerAvailability(ctx context.Context) (*DockerStatus, error)
	CheckInternetConnectivity(ctx context.Context) (*InternetStatus, error)
	CheckFFmpegAvailability(ctx context.Context) (*FFmpegStatus, error)
	CheckMediaInfoAvailability(ctx context.Context) (*MediaInfoStatus, error)
	DownloadFFmpeg(ctx context.Context) (*DownloadResult, error)
	DownloadMediaInfo(ctx context.Context) (*DownloadResult, error)
}

type DryRunService interface {
	SetConfig(ctx context.Context, config *DryRunConfig) error
	InjectError(ctx context.Context, errorType string) error
	GetStatus(ctx context.Context) (*DryRunStatus, error)
}

type LoggingService interface {
	// Backend logging methods
	BackendLogger(ctx context.Context, component string, logJson string) error
	BackendLoggerBatch(ctx context.Context, component string, logsJson string) error
	// Trace log management
	SetTraceLogs(ctx context.Context, enable bool) error
	GetTraceLogs(ctx context.Context) (bool, error)
	// WebAssembly state management
	RecordWasmState(ctx context.Context, stateJson string) error
	RequestWasmState(ctx context.Context) error
	// Debug report export
	ExportDebugReport(ctx context.Context) error
	// Event throttling management
	SetEventThrottling(ctx context.Context, enabled bool) error
	GetEventThrottlingStatus(ctx context.Context) (*EventThrottlingStatus, error)
}

type ModelService interface {
	// STT methods
	GetAvailableSTTModelsForUI(ctx context.Context) (*STTModelsResponse, error)
	RefreshSTTModelsAfterSettingsUpdate(ctx context.Context) (*STTModelsResponse, error)
	// LLM summary methods
	GetAvailableSummaryProviders(ctx context.Context) (*SummaryProvidersResponse, error)
	GetAvailableSummaryModels(ctx context.Context, providerName string) (*SummaryModelsResponse, error)
}

type SettingsService interface {
	// Settings management
	InitSettings(ctx context.Context) error
	LoadSettings(ctx context.Context) (*Settings, error)
	SaveSettings(ctx context.Context, settings *Settings) error
	// Statistics management
	LoadStatistics(ctx context.Context) (map[string]interface{}, error)
	UpdateStatistics(ctx context.Context, updates map[string]interface{}) error
	IncrementStatistic(ctx context.Context, key string) (*IncrementResult, error)
}

//
// Client types
//

type LanguageServiceClient interface {
	ValidateLanguage(ctx context.Context, validation *LanguageValidation) (*ValidationResponse, error)
	GetLanguageRequirements(ctx context.Context, languageTag string) (*LanguageRequirements, error)
	NeedsTokenization(ctx context.Context, language string) (bool, error)
	GetRomanizationStyles(ctx context.Context, languageCode string) (*RomanizationStylesResponse, error)
}

type DependencyServiceClient interface {
	CheckDockerAvailability(ctx context.Context) (*DockerStatus, error)
	CheckInternetConnectivity(ctx context.Context) (*InternetStatus, error)
	CheckFFmpegAvailability(ctx context.Context) (*FFmpegStatus, error)
	CheckMediaInfoAvailability(ctx context.Context) (*MediaInfoStatus, error)
	DownloadFFmpeg(ctx context.Context) (*DownloadResult, error)
	DownloadMediaInfo(ctx context.Context) (*DownloadResult, error)
}

type DryRunServiceClient interface {
	SetConfig(ctx context.Context, config *DryRunConfig) error
	InjectError(ctx context.Context, errorType string) error
	GetStatus(ctx context.Context) (*DryRunStatus, error)
}

type LoggingServiceClient interface {
	// Backend logging methods
	BackendLogger(ctx context.Context, component string, logJson string) error
	BackendLoggerBatch(ctx context.Context, component string, logsJson string) error
	// Trace log management
	SetTraceLogs(ctx context.Context, enable bool) error
	GetTraceLogs(ctx context.Context) (bool, error)
	// WebAssembly state management
	RecordWasmState(ctx context.Context, stateJson string) error
	RequestWasmState(ctx context.Context) error
	// Debug report export
	ExportDebugReport(ctx context.Context) error
	// Event throttling management
	SetEventThrottling(ctx context.Context, enabled bool) error
	GetEventThrottlingStatus(ctx context.Context) (*EventThrottlingStatus, error)
}

type ModelServiceClient interface {
	// STT methods
	GetAvailableSTTModelsForUI(ctx context.Context) (*STTModelsResponse, error)
	RefreshSTTModelsAfterSettingsUpdate(ctx context.Context) (*STTModelsResponse, error)
	// LLM summary methods
	GetAvailableSummaryProviders(ctx context.Context) (*SummaryProvidersResponse, error)
	GetAvailableSummaryModels(ctx context.Context, providerName string) (*SummaryModelsResponse, error)
}

type SettingsServiceClient interface {
	// Settings management
	InitSettings(ctx context.Context) error
	LoadSettings(ctx context.Context) (*Settings, error)
	SaveSettings(ctx context.Context, settings *Settings) error
	// Statistics management
	LoadStatistics(ctx context.Context) (map[string]interface{}, error)
	UpdateStatistics(ctx context.Context, updates map[string]interface{}) error
	IncrementStatistic(ctx context.Context, key string) (*IncrementResult, error)
}

//
// Server
//

type WebRPCServer interface {
	http.Handler
}

type languageServiceServer struct {
	LanguageService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewLanguageServiceServer(svc LanguageService) *languageServiceServer {
	return &languageServiceServer{
		LanguageService: svc,
	}
}

func (s *languageServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "LanguageService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/LanguageService/ValidateLanguage":
		handler = s.serveValidateLanguageJSON
	case "/rpc/LanguageService/GetLanguageRequirements":
		handler = s.serveGetLanguageRequirementsJSON
	case "/rpc/LanguageService/NeedsTokenization":
		handler = s.serveNeedsTokenizationJSON
	case "/rpc/LanguageService/GetRomanizationStyles":
		handler = s.serveGetRomanizationStylesJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *languageServiceServer) serveValidateLanguageJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ValidateLanguage")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *LanguageValidation `json:"validation"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.LanguageService.ValidateLanguage(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *ValidationResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *languageServiceServer) serveGetLanguageRequirementsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetLanguageRequirements")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"languageTag"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.LanguageService.GetLanguageRequirements(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *LanguageRequirements `json:"requirements"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *languageServiceServer) serveNeedsTokenizationJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "NeedsTokenization")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"language"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.LanguageService.NeedsTokenization(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"needed"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *languageServiceServer) serveGetRomanizationStylesJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetRomanizationStyles")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"languageCode"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.LanguageService.GetRomanizationStyles(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *RomanizationStylesResponse `json:"styles"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *languageServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

type dependencyServiceServer struct {
	DependencyService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewDependencyServiceServer(svc DependencyService) *dependencyServiceServer {
	return &dependencyServiceServer{
		DependencyService: svc,
	}
}

func (s *dependencyServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "DependencyService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/DependencyService/CheckDockerAvailability":
		handler = s.serveCheckDockerAvailabilityJSON
	case "/rpc/DependencyService/CheckInternetConnectivity":
		handler = s.serveCheckInternetConnectivityJSON
	case "/rpc/DependencyService/CheckFFmpegAvailability":
		handler = s.serveCheckFFmpegAvailabilityJSON
	case "/rpc/DependencyService/CheckMediaInfoAvailability":
		handler = s.serveCheckMediaInfoAvailabilityJSON
	case "/rpc/DependencyService/DownloadFFmpeg":
		handler = s.serveDownloadFFmpegJSON
	case "/rpc/DependencyService/DownloadMediaInfo":
		handler = s.serveDownloadMediaInfoJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *dependencyServiceServer) serveCheckDockerAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CheckDockerAvailability")

	// Call service method implementation.
	ret0, err := s.DependencyService.CheckDockerAvailability(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *DockerStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) serveCheckInternetConnectivityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CheckInternetConnectivity")

	// Call service method implementation.
	ret0, err := s.DependencyService.CheckInternetConnectivity(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *InternetStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) serveCheckFFmpegAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CheckFFmpegAvailability")

	// Call service method implementation.
	ret0, err := s.DependencyService.CheckFFmpegAvailability(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *FFmpegStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) serveCheckMediaInfoAvailabilityJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "CheckMediaInfoAvailability")

	// Call service method implementation.
	ret0, err := s.DependencyService.CheckMediaInfoAvailability(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *MediaInfoStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) serveDownloadFFmpegJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DownloadFFmpeg")

	// Call service method implementation.
	ret0, err := s.DependencyService.DownloadFFmpeg(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *DownloadResult `json:"result"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) serveDownloadMediaInfoJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "DownloadMediaInfo")

	// Call service method implementation.
	ret0, err := s.DependencyService.DownloadMediaInfo(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *DownloadResult `json:"result"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dependencyServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

type dryRunServiceServer struct {
	DryRunService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewDryRunServiceServer(svc DryRunService) *dryRunServiceServer {
	return &dryRunServiceServer{
		DryRunService: svc,
	}
}

func (s *dryRunServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "DryRunService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/DryRunService/SetConfig":
		handler = s.serveSetConfigJSON
	case "/rpc/DryRunService/InjectError":
		handler = s.serveInjectErrorJSON
	case "/rpc/DryRunService/GetStatus":
		handler = s.serveGetStatusJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *dryRunServiceServer) serveSetConfigJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SetConfig")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *DryRunConfig `json:"config"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.DryRunService.SetConfig(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *dryRunServiceServer) serveInjectErrorJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InjectError")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"errorType"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.DryRunService.InjectError(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *dryRunServiceServer) serveGetStatusJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetStatus")

	// Call service method implementation.
	ret0, err := s.DryRunService.GetStatus(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *DryRunStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *dryRunServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

type loggingServiceServer struct {
	LoggingService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewLoggingServiceServer(svc LoggingService) *loggingServiceServer {
	return &loggingServiceServer{
		LoggingService: svc,
	}
}

func (s *loggingServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "LoggingService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/LoggingService/BackendLogger":
		handler = s.serveBackendLoggerJSON
	case "/rpc/LoggingService/BackendLoggerBatch":
		handler = s.serveBackendLoggerBatchJSON
	case "/rpc/LoggingService/SetTraceLogs":
		handler = s.serveSetTraceLogsJSON
	case "/rpc/LoggingService/GetTraceLogs":
		handler = s.serveGetTraceLogsJSON
	case "/rpc/LoggingService/RecordWasmState":
		handler = s.serveRecordWasmStateJSON
	case "/rpc/LoggingService/RequestWasmState":
		handler = s.serveRequestWasmStateJSON
	case "/rpc/LoggingService/ExportDebugReport":
		handler = s.serveExportDebugReportJSON
	case "/rpc/LoggingService/SetEventThrottling":
		handler = s.serveSetEventThrottlingJSON
	case "/rpc/LoggingService/GetEventThrottlingStatus":
		handler = s.serveGetEventThrottlingStatusJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *loggingServiceServer) serveBackendLoggerJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "BackendLogger")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"component"`
		Arg1 string `json:"logJson"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.LoggingService.BackendLogger(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveBackendLoggerBatchJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "BackendLoggerBatch")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"component"`
		Arg1 string `json:"logsJson"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.LoggingService.BackendLoggerBatch(ctx, reqPayload.Arg0, reqPayload.Arg1)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveSetTraceLogsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SetTraceLogs")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 bool `json:"enable"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.LoggingService.SetTraceLogs(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveGetTraceLogsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetTraceLogs")

	// Call service method implementation.
	ret0, err := s.LoggingService.GetTraceLogs(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 bool `json:"enabled"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *loggingServiceServer) serveRecordWasmStateJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RecordWasmState")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"stateJson"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.LoggingService.RecordWasmState(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveRequestWasmStateJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RequestWasmState")

	// Call service method implementation.
	err := s.LoggingService.RequestWasmState(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveExportDebugReportJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "ExportDebugReport")

	// Call service method implementation.
	err := s.LoggingService.ExportDebugReport(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveSetEventThrottlingJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SetEventThrottling")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 bool `json:"enabled"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.LoggingService.SetEventThrottling(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *loggingServiceServer) serveGetEventThrottlingStatusJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetEventThrottlingStatus")

	// Call service method implementation.
	ret0, err := s.LoggingService.GetEventThrottlingStatus(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *EventThrottlingStatus `json:"status"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *loggingServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

type modelServiceServer struct {
	ModelService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewModelServiceServer(svc ModelService) *modelServiceServer {
	return &modelServiceServer{
		ModelService: svc,
	}
}

func (s *modelServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "ModelService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/ModelService/GetAvailableSTTModelsForUI":
		handler = s.serveGetAvailableSTTModelsForUIJSON
	case "/rpc/ModelService/RefreshSTTModelsAfterSettingsUpdate":
		handler = s.serveRefreshSTTModelsAfterSettingsUpdateJSON
	case "/rpc/ModelService/GetAvailableSummaryProviders":
		handler = s.serveGetAvailableSummaryProvidersJSON
	case "/rpc/ModelService/GetAvailableSummaryModels":
		handler = s.serveGetAvailableSummaryModelsJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *modelServiceServer) serveGetAvailableSTTModelsForUIJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAvailableSTTModelsForUI")

	// Call service method implementation.
	ret0, err := s.ModelService.GetAvailableSTTModelsForUI(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *STTModelsResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *modelServiceServer) serveRefreshSTTModelsAfterSettingsUpdateJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "RefreshSTTModelsAfterSettingsUpdate")

	// Call service method implementation.
	ret0, err := s.ModelService.RefreshSTTModelsAfterSettingsUpdate(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *STTModelsResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *modelServiceServer) serveGetAvailableSummaryProvidersJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAvailableSummaryProviders")

	// Call service method implementation.
	ret0, err := s.ModelService.GetAvailableSummaryProviders(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *SummaryProvidersResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *modelServiceServer) serveGetAvailableSummaryModelsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "GetAvailableSummaryModels")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"providerName"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.ModelService.GetAvailableSummaryModels(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *SummaryModelsResponse `json:"response"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *modelServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

type settingsServiceServer struct {
	SettingsService
	OnError   func(r *http.Request, rpcErr *WebRPCError)
	OnRequest func(w http.ResponseWriter, r *http.Request) error
}

func NewSettingsServiceServer(svc SettingsService) *settingsServiceServer {
	return &settingsServiceServer{
		SettingsService: svc,
	}
}

func (s *settingsServiceServer) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	defer func() {
		// In case of a panic, serve a HTTP 500 error and then panic.
		if rr := recover(); rr != nil {
			s.sendErrorJSON(w, r, ErrWebrpcServerPanic.WithCausef("%v", rr))
			panic(rr)
		}
	}()

	w.Header().Set(WebrpcHeader, WebrpcHeaderValue)

	ctx := r.Context()
	ctx = context.WithValue(ctx, HTTPResponseWriterCtxKey, w)
	ctx = context.WithValue(ctx, HTTPRequestCtxKey, r)
	ctx = context.WithValue(ctx, ServiceNameCtxKey, "SettingsService")

	r = r.WithContext(ctx)

	var handler func(ctx context.Context, w http.ResponseWriter, r *http.Request)
	switch r.URL.Path {
	case "/rpc/SettingsService/InitSettings":
		handler = s.serveInitSettingsJSON
	case "/rpc/SettingsService/LoadSettings":
		handler = s.serveLoadSettingsJSON
	case "/rpc/SettingsService/SaveSettings":
		handler = s.serveSaveSettingsJSON
	case "/rpc/SettingsService/LoadStatistics":
		handler = s.serveLoadStatisticsJSON
	case "/rpc/SettingsService/UpdateStatistics":
		handler = s.serveUpdateStatisticsJSON
	case "/rpc/SettingsService/IncrementStatistic":
		handler = s.serveIncrementStatisticJSON
	default:
		err := ErrWebrpcBadRoute.WithCausef("no webrpc method defined for path %v", r.URL.Path)
		s.sendErrorJSON(w, r, err)
		return
	}

	if r.Method != "POST" {
		w.Header().Add("Allow", "POST") // RFC 9110.
		err := ErrWebrpcBadMethod.WithCausef("unsupported HTTP method %v (only POST is allowed)", r.Method)
		s.sendErrorJSON(w, r, err)
		return
	}

	contentType := r.Header.Get("Content-Type")
	if i := strings.Index(contentType, ";"); i >= 0 {
		contentType = contentType[:i]
	}
	contentType = strings.TrimSpace(strings.ToLower(contentType))

	switch contentType {
	case "application/json":
		if s.OnRequest != nil {
			if err := s.OnRequest(w, r); err != nil {
				rpcErr, ok := err.(WebRPCError)
				if !ok {
					rpcErr = ErrWebrpcEndpoint.WithCause(err)
				}
				s.sendErrorJSON(w, r, rpcErr)
				return
			}
		}

		handler(ctx, w, r)
	default:
		err := ErrWebrpcBadRequest.WithCausef("unsupported Content-Type %q (only application/json is allowed)", r.Header.Get("Content-Type"))
		s.sendErrorJSON(w, r, err)
	}
}

func (s *settingsServiceServer) serveInitSettingsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "InitSettings")

	// Call service method implementation.
	err := s.SettingsService.InitSettings(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *settingsServiceServer) serveLoadSettingsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "LoadSettings")

	// Call service method implementation.
	ret0, err := s.SettingsService.LoadSettings(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *Settings `json:"settings"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *settingsServiceServer) serveSaveSettingsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "SaveSettings")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 *Settings `json:"settings"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.SettingsService.SaveSettings(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *settingsServiceServer) serveLoadStatisticsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "LoadStatistics")

	// Call service method implementation.
	ret0, err := s.SettingsService.LoadStatistics(ctx)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 map[string]interface{} `json:"statistics"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *settingsServiceServer) serveUpdateStatisticsJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "UpdateStatistics")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 map[string]interface{} `json:"updates"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	err = s.SettingsService.UpdateStatistics(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write([]byte("{}"))
}

func (s *settingsServiceServer) serveIncrementStatisticJSON(ctx context.Context, w http.ResponseWriter, r *http.Request) {
	ctx = context.WithValue(ctx, MethodNameCtxKey, "IncrementStatistic")

	reqBody, err := io.ReadAll(r.Body)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to read request data: %w", err))
		return
	}
	defer r.Body.Close()

	reqPayload := struct {
		Arg0 string `json:"key"`
	}{}
	if err := json.Unmarshal(reqBody, &reqPayload); err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadRequest.WithCausef("failed to unmarshal request data: %w", err))
		return
	}

	// Call service method implementation.
	ret0, err := s.SettingsService.IncrementStatistic(ctx, reqPayload.Arg0)
	if err != nil {
		rpcErr, ok := err.(WebRPCError)
		if !ok {
			rpcErr = ErrWebrpcEndpoint.WithCause(err)
		}
		s.sendErrorJSON(w, r, rpcErr)
		return
	}

	respPayload := struct {
		Ret0 *IncrementResult `json:"result"`
	}{ret0}
	respBody, err := json.Marshal(respPayload)
	if err != nil {
		s.sendErrorJSON(w, r, ErrWebrpcBadResponse.WithCausef("failed to marshal json response: %w", err))
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(http.StatusOK)
	w.Write(respBody)
}

func (s *settingsServiceServer) sendErrorJSON(w http.ResponseWriter, r *http.Request, rpcErr WebRPCError) {
	if s.OnError != nil {
		s.OnError(r, &rpcErr)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

func RespondWithError(w http.ResponseWriter, err error) {
	rpcErr, ok := err.(WebRPCError)
	if !ok {
		rpcErr = ErrWebrpcEndpoint.WithCause(err)
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(rpcErr.HTTPStatus)

	respBody, _ := json.Marshal(rpcErr)
	w.Write(respBody)
}

//
// Client
//

const LanguageServicePathPrefix = "/rpc/LanguageService/"
const DependencyServicePathPrefix = "/rpc/DependencyService/"
const DryRunServicePathPrefix = "/rpc/DryRunService/"
const LoggingServicePathPrefix = "/rpc/LoggingService/"
const ModelServicePathPrefix = "/rpc/ModelService/"
const SettingsServicePathPrefix = "/rpc/SettingsService/"

type languageServiceClient struct {
	client HTTPClient
	urls   [4]string
}

func NewLanguageServiceClient(addr string, client HTTPClient) LanguageServiceClient {
	prefix := urlBase(addr) + LanguageServicePathPrefix
	urls := [4]string{
		prefix + "ValidateLanguage",
		prefix + "GetLanguageRequirements",
		prefix + "NeedsTokenization",
		prefix + "GetRomanizationStyles",
	}
	return &languageServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *languageServiceClient) ValidateLanguage(ctx context.Context, validation *LanguageValidation) (*ValidationResponse, error) {
	in := struct {
		Arg0 *LanguageValidation `json:"validation"`
	}{validation}

	out := struct {
		Ret0 *ValidationResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *languageServiceClient) GetLanguageRequirements(ctx context.Context, languageTag string) (*LanguageRequirements, error) {
	in := struct {
		Arg0 string `json:"languageTag"`
	}{languageTag}

	out := struct {
		Ret0 *LanguageRequirements `json:"requirements"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *languageServiceClient) NeedsTokenization(ctx context.Context, language string) (bool, error) {
	in := struct {
		Arg0 string `json:"language"`
	}{language}

	out := struct {
		Ret0 bool `json:"needed"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *languageServiceClient) GetRomanizationStyles(ctx context.Context, languageCode string) (*RomanizationStylesResponse, error) {
	in := struct {
		Arg0 string `json:"languageCode"`
	}{languageCode}

	out := struct {
		Ret0 *RomanizationStylesResponse `json:"styles"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type dependencyServiceClient struct {
	client HTTPClient
	urls   [6]string
}

func NewDependencyServiceClient(addr string, client HTTPClient) DependencyServiceClient {
	prefix := urlBase(addr) + DependencyServicePathPrefix
	urls := [6]string{
		prefix + "CheckDockerAvailability",
		prefix + "CheckInternetConnectivity",
		prefix + "CheckFFmpegAvailability",
		prefix + "CheckMediaInfoAvailability",
		prefix + "DownloadFFmpeg",
		prefix + "DownloadMediaInfo",
	}
	return &dependencyServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *dependencyServiceClient) CheckDockerAvailability(ctx context.Context) (*DockerStatus, error) {
	out := struct {
		Ret0 *DockerStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *dependencyServiceClient) CheckInternetConnectivity(ctx context.Context) (*InternetStatus, error) {
	out := struct {
		Ret0 *InternetStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *dependencyServiceClient) CheckFFmpegAvailability(ctx context.Context) (*FFmpegStatus, error) {
	out := struct {
		Ret0 *FFmpegStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *dependencyServiceClient) CheckMediaInfoAvailability(ctx context.Context) (*MediaInfoStatus, error) {
	out := struct {
		Ret0 *MediaInfoStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *dependencyServiceClient) DownloadFFmpeg(ctx context.Context) (*DownloadResult, error) {
	out := struct {
		Ret0 *DownloadResult `json:"result"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *dependencyServiceClient) DownloadMediaInfo(ctx context.Context) (*DownloadResult, error) {
	out := struct {
		Ret0 *DownloadResult `json:"result"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type dryRunServiceClient struct {
	client HTTPClient
	urls   [3]string
}

func NewDryRunServiceClient(addr string, client HTTPClient) DryRunServiceClient {
	prefix := urlBase(addr) + DryRunServicePathPrefix
	urls := [3]string{
		prefix + "SetConfig",
		prefix + "InjectError",
		prefix + "GetStatus",
	}
	return &dryRunServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *dryRunServiceClient) SetConfig(ctx context.Context, config *DryRunConfig) error {
	in := struct {
		Arg0 *DryRunConfig `json:"config"`
	}{config}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *dryRunServiceClient) InjectError(ctx context.Context, errorType string) error {
	in := struct {
		Arg0 string `json:"errorType"`
	}{errorType}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *dryRunServiceClient) GetStatus(ctx context.Context) (*DryRunStatus, error) {
	out := struct {
		Ret0 *DryRunStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type loggingServiceClient struct {
	client HTTPClient
	urls   [9]string
}

func NewLoggingServiceClient(addr string, client HTTPClient) LoggingServiceClient {
	prefix := urlBase(addr) + LoggingServicePathPrefix
	urls := [9]string{
		prefix + "BackendLogger",
		prefix + "BackendLoggerBatch",
		prefix + "SetTraceLogs",
		prefix + "GetTraceLogs",
		prefix + "RecordWasmState",
		prefix + "RequestWasmState",
		prefix + "ExportDebugReport",
		prefix + "SetEventThrottling",
		prefix + "GetEventThrottlingStatus",
	}
	return &loggingServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *loggingServiceClient) BackendLogger(ctx context.Context, component string, logJson string) error {
	in := struct {
		Arg0 string `json:"component"`
		Arg1 string `json:"logJson"`
	}{component, logJson}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) BackendLoggerBatch(ctx context.Context, component string, logsJson string) error {
	in := struct {
		Arg0 string `json:"component"`
		Arg1 string `json:"logsJson"`
	}{component, logsJson}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) SetTraceLogs(ctx context.Context, enable bool) error {
	in := struct {
		Arg0 bool `json:"enable"`
	}{enable}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) GetTraceLogs(ctx context.Context) (bool, error) {
	out := struct {
		Ret0 bool `json:"enabled"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *loggingServiceClient) RecordWasmState(ctx context.Context, stateJson string) error {
	in := struct {
		Arg0 string `json:"stateJson"`
	}{stateJson}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) RequestWasmState(ctx context.Context) error {
	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], nil, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) ExportDebugReport(ctx context.Context) error {
	resp, err := doHTTPRequest(ctx, c.client, c.urls[6], nil, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) SetEventThrottling(ctx context.Context, enabled bool) error {
	in := struct {
		Arg0 bool `json:"enabled"`
	}{enabled}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[7], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *loggingServiceClient) GetEventThrottlingStatus(ctx context.Context) (*EventThrottlingStatus, error) {
	out := struct {
		Ret0 *EventThrottlingStatus `json:"status"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[8], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type modelServiceClient struct {
	client HTTPClient
	urls   [4]string
}

func NewModelServiceClient(addr string, client HTTPClient) ModelServiceClient {
	prefix := urlBase(addr) + ModelServicePathPrefix
	urls := [4]string{
		prefix + "GetAvailableSTTModelsForUI",
		prefix + "RefreshSTTModelsAfterSettingsUpdate",
		prefix + "GetAvailableSummaryProviders",
		prefix + "GetAvailableSummaryModels",
	}
	return &modelServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *modelServiceClient) GetAvailableSTTModelsForUI(ctx context.Context) (*STTModelsResponse, error) {
	out := struct {
		Ret0 *STTModelsResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *modelServiceClient) RefreshSTTModelsAfterSettingsUpdate(ctx context.Context) (*STTModelsResponse, error) {
	out := struct {
		Ret0 *STTModelsResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *modelServiceClient) GetAvailableSummaryProviders(ctx context.Context) (*SummaryProvidersResponse, error) {
	out := struct {
		Ret0 *SummaryProvidersResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *modelServiceClient) GetAvailableSummaryModels(ctx context.Context, providerName string) (*SummaryModelsResponse, error) {
	in := struct {
		Arg0 string `json:"providerName"`
	}{providerName}

	out := struct {
		Ret0 *SummaryModelsResponse `json:"response"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

type settingsServiceClient struct {
	client HTTPClient
	urls   [6]string
}

func NewSettingsServiceClient(addr string, client HTTPClient) SettingsServiceClient {
	prefix := urlBase(addr) + SettingsServicePathPrefix
	urls := [6]string{
		prefix + "InitSettings",
		prefix + "LoadSettings",
		prefix + "SaveSettings",
		prefix + "LoadStatistics",
		prefix + "UpdateStatistics",
		prefix + "IncrementStatistic",
	}
	return &settingsServiceClient{
		client: client,
		urls:   urls,
	}
}

func (c *settingsServiceClient) InitSettings(ctx context.Context) error {
	resp, err := doHTTPRequest(ctx, c.client, c.urls[0], nil, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *settingsServiceClient) LoadSettings(ctx context.Context) (*Settings, error) {
	out := struct {
		Ret0 *Settings `json:"settings"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[1], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *settingsServiceClient) SaveSettings(ctx context.Context, settings *Settings) error {
	in := struct {
		Arg0 *Settings `json:"settings"`
	}{settings}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[2], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *settingsServiceClient) LoadStatistics(ctx context.Context) (map[string]interface{}, error) {
	out := struct {
		Ret0 map[string]interface{} `json:"statistics"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[3], nil, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

func (c *settingsServiceClient) UpdateStatistics(ctx context.Context, updates map[string]interface{}) error {
	in := struct {
		Arg0 map[string]interface{} `json:"updates"`
	}{updates}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[4], in, nil)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return err
}

func (c *settingsServiceClient) IncrementStatistic(ctx context.Context, key string) (*IncrementResult, error) {
	in := struct {
		Arg0 string `json:"key"`
	}{key}

	out := struct {
		Ret0 *IncrementResult `json:"result"`
	}{}

	resp, err := doHTTPRequest(ctx, c.client, c.urls[5], in, &out)
	if resp != nil {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = ErrWebrpcRequestFailed.WithCausef("failed to close response body: %w", cerr)
		}
	}

	return out.Ret0, err
}

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// urlBase helps ensure that addr specifies a scheme. If it is unparsable
// as a URL, it returns addr unchanged.
func urlBase(addr string) string {
	// If the addr specifies a scheme, use it. If not, default to
	// http. If url.Parse fails on it, return it unchanged.
	url, err := url.Parse(addr)
	if err != nil {
		return addr
	}
	if url.Scheme == "" {
		url.Scheme = "http"
	}
	return url.String()
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequestWithContext(ctx, "POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set(WebrpcHeader, WebrpcHeaderValue)
	if headers, ok := HTTPRequestHeaders(ctx); ok {
		for k := range headers {
			for _, v := range headers[k] {
				req.Header.Add(k, v)
			}
		}
	}
	return req, nil
}

// doHTTPRequest is common code to make a request to the remote service.
func doHTTPRequest(ctx context.Context, client HTTPClient, url string, in, out interface{}) (*http.Response, error) {
	reqBody, err := json.Marshal(in)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("failed to marshal JSON body: %w", err)
	}
	if err = ctx.Err(); err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("aborted because context was done: %w", err)
	}

	req, err := newRequest(ctx, url, bytes.NewBuffer(reqBody), "application/json")
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCausef("could not build request: %w", err)
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, ErrWebrpcRequestFailed.WithCause(err)
	}

	if resp.StatusCode != 200 {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to read server error response body: %w", err)
		}

		var rpcErr WebRPCError
		if err := json.Unmarshal(respBody, &rpcErr); err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to unmarshal server error: %w", err)
		}
		if rpcErr.Cause != "" {
			rpcErr.cause = errors.New(rpcErr.Cause)
		}
		return nil, rpcErr
	}

	if out != nil {
		respBody, err := io.ReadAll(resp.Body)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to read response body: %w", err)
		}

		err = json.Unmarshal(respBody, &out)
		if err != nil {
			return nil, ErrWebrpcBadResponse.WithCausef("failed to unmarshal JSON response body: %w", err)
		}
	}

	return resp, nil
}

func WithHTTPRequestHeaders(ctx context.Context, h http.Header) (context.Context, error) {
	if _, ok := h["Accept"]; ok {
		return nil, errors.New("provided header cannot set Accept")
	}
	if _, ok := h["Content-Type"]; ok {
		return nil, errors.New("provided header cannot set Content-Type")
	}

	copied := make(http.Header, len(h))
	for k, vv := range h {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}

	return context.WithValue(ctx, HTTPClientRequestHeadersCtxKey, copied), nil
}

func HTTPRequestHeaders(ctx context.Context) (http.Header, bool) {
	h, ok := ctx.Value(HTTPClientRequestHeadersCtxKey).(http.Header)
	return h, ok
}

//
// Helpers
//

type method struct {
	name        string
	service     string
	annotations map[string]string
}

func (m method) Name() string {
	return m.name
}

func (m method) Service() string {
	return m.service
}

func (m method) Annotations() map[string]string {
	res := make(map[string]string, len(m.annotations))
	for k, v := range m.annotations {
		res[k] = v
	}

	return res
}

type contextKey struct {
	name string
}

func (k *contextKey) String() string {
	return "webrpc context value " + k.name
}

var (
	HTTPClientRequestHeadersCtxKey = &contextKey{"HTTPClientRequestHeaders"}
	HTTPResponseWriterCtxKey       = &contextKey{"HTTPResponseWriter"}

	HTTPRequestCtxKey = &contextKey{"HTTPRequest"}

	ServiceNameCtxKey = &contextKey{"ServiceName"}

	MethodNameCtxKey = &contextKey{"MethodName"}
)

func ServiceNameFromContext(ctx context.Context) string {
	service, _ := ctx.Value(ServiceNameCtxKey).(string)
	return service
}

func MethodNameFromContext(ctx context.Context) string {
	method, _ := ctx.Value(MethodNameCtxKey).(string)
	return method
}

func RequestFromContext(ctx context.Context) *http.Request {
	r, _ := ctx.Value(HTTPRequestCtxKey).(*http.Request)
	return r
}

func MethodCtx(ctx context.Context) (method, bool) {
	req := RequestFromContext(ctx)
	if req == nil {
		return method{}, false
	}

	m, ok := methods[req.URL.Path]
	if !ok {
		return method{}, false
	}

	return m, true
}

func ResponseWriterFromContext(ctx context.Context) http.ResponseWriter {
	w, _ := ctx.Value(HTTPResponseWriterCtxKey).(http.ResponseWriter)
	return w
}

//
// Errors
//

type WebRPCError struct {
	Name       string `json:"error"`
	Code       int    `json:"code"`
	Message    string `json:"msg"`
	Cause      string `json:"cause,omitempty"`
	HTTPStatus int    `json:"status"`
	cause      error
}

var _ error = WebRPCError{}

func (e WebRPCError) Error() string {
	if e.cause != nil {
		return fmt.Sprintf("%s %d: %s: %v", e.Name, e.Code, e.Message, e.cause)
	}
	return fmt.Sprintf("%s %d: %s", e.Name, e.Code, e.Message)
}

func (e WebRPCError) Is(target error) bool {
	if target == nil {
		return false
	}
	if rpcErr, ok := target.(WebRPCError); ok {
		return rpcErr.Code == e.Code
	}
	return errors.Is(e.cause, target)
}

func (e WebRPCError) Unwrap() error {
	return e.cause
}

func (e WebRPCError) WithCause(cause error) WebRPCError {
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

func (e WebRPCError) WithCausef(format string, args ...interface{}) WebRPCError {
	cause := fmt.Errorf(format, args...)
	err := e
	err.cause = cause
	err.Cause = cause.Error()
	return err
}

// Deprecated: Use .WithCause() method on WebRPCError.
func ErrorWithCause(rpcErr WebRPCError, cause error) WebRPCError {
	return rpcErr.WithCause(cause)
}

// Webrpc errors
var (
	ErrWebrpcEndpoint           = WebRPCError{Code: 0, Name: "WebrpcEndpoint", Message: "endpoint error", HTTPStatus: 400}
	ErrWebrpcRequestFailed      = WebRPCError{Code: -1, Name: "WebrpcRequestFailed", Message: "request failed", HTTPStatus: 400}
	ErrWebrpcBadRoute           = WebRPCError{Code: -2, Name: "WebrpcBadRoute", Message: "bad route", HTTPStatus: 404}
	ErrWebrpcBadMethod          = WebRPCError{Code: -3, Name: "WebrpcBadMethod", Message: "bad method", HTTPStatus: 405}
	ErrWebrpcBadRequest         = WebRPCError{Code: -4, Name: "WebrpcBadRequest", Message: "bad request", HTTPStatus: 400}
	ErrWebrpcBadResponse        = WebRPCError{Code: -5, Name: "WebrpcBadResponse", Message: "bad response", HTTPStatus: 500}
	ErrWebrpcServerPanic        = WebRPCError{Code: -6, Name: "WebrpcServerPanic", Message: "server panic", HTTPStatus: 500}
	ErrWebrpcInternalError      = WebRPCError{Code: -7, Name: "WebrpcInternalError", Message: "internal error", HTTPStatus: 500}
	ErrWebrpcClientDisconnected = WebRPCError{Code: -8, Name: "WebrpcClientDisconnected", Message: "client disconnected", HTTPStatus: 400}
	ErrWebrpcStreamLost         = WebRPCError{Code: -9, Name: "WebrpcStreamLost", Message: "stream lost", HTTPStatus: 400}
	ErrWebrpcStreamFinished     = WebRPCError{Code: -10, Name: "WebrpcStreamFinished", Message: "stream finished", HTTPStatus: 200}
)
