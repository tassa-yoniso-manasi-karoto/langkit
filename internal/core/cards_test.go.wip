package core

import (
	"bytes"
	"context"
	"errors"
	"os"
	"path"
	"testing"
	"time"

	astisub "github.com/asticode/go-astisub"
	iso "github.com/barbashov/iso639-3"
	"github.com/rs/zerolog"
	"github.com/spf13/afero"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/mock"
	"github.com/stretchr/testify/require"
	"github.com/stretchr/testify/suite"
	"github.com/tassa-yoniso-manasi-karoto/langkit/internal/pkg/crash"
	"github.com/tassa-yoniso-manasi-karoto/langkit/internal/pkg/subs"
)

// ExtendedMockHandler adds some more functionality to the basic MockHandler
type ExtendedMockHandler struct {
	MockHandler
	mock.Mock
}

func (m *ExtendedMockHandler) ZeroLog() *zerolog.Logger {
	return m.MockHandler.ZeroLog()
}

func (m *ExtendedMockHandler) Log(level int8, behavior string, msg string) *ProcessingError {
	args := m.Called(level, behavior, msg)
	if args.Get(0) == nil {
		return nil
	}
	return args.Get(0).(*ProcessingError)
}

func (m *ExtendedMockHandler) LogErr(err error, behavior string, msg string) *ProcessingError {
	args := m.Called(err, behavior, msg)
	if args.Get(0) == nil {
		return nil
	}
	return args.Get(0).(*ProcessingError)
}

func (m *ExtendedMockHandler) IsCLI() bool {
	args := m.Called()
	return args.Bool(0)
}

// MockReporter is a mock implementation of the crash.ReporterInstance
type MockReporter struct {
	mock.Mock
}

func (m *MockReporter) SaveSnapshot(tag string, data string) {
	m.Called(tag, data)
}

func (m *MockReporter) SaveExecSnapshot(tag string, data string) {
	m.Called(tag, data)
}

func (m *MockReporter) Record(recorder func(*crash.GlobalScope, *crash.ExecutionScope)) {
	m.Called(recorder)
}

func (m *MockReporter) ClearExecutionRecords() {
	m.Called()
}

func (m *MockReporter) GetScopes() (crash.GlobalScope, crash.ExecutionScope) {
	args := m.Called()
	return args.Get(0).(crash.GlobalScope), args.Get(1).(crash.ExecutionScope)
}

func (m *MockReporter) GetSnapshotsString() string {
	args := m.Called()
	return args.String(0)
}

func (m *MockReporter) GetUptime() time.Duration {
	args := m.Called()
	return args.Get(0).(time.Duration)
}

// FileSystemTestSuite is a test suite for file system operations using afero
type FileSystemTestSuite struct {
	suite.Suite
	Fs        afero.Fs
	TempDir   string
	Handler   *ExtendedMockHandler
	Task      *Task
	Ctx       context.Context
	OldFs     afero.Fs
	OldOsOpen func(string) (*os.File, error)
}

func (suite *FileSystemTestSuite) SetupTest() {
	suite.Fs = afero.NewMemMapFs()
	suite.TempDir = "/tmp/langkit-test"
	suite.Fs.MkdirAll(suite.TempDir, 0755)
	
	suite.Handler = new(ExtendedMockHandler)
	suite.Handler.logger = zerolog.New(zerolog.NewTestWriter(suite.T()))
	
	suite.Task = &Task{
		Handler:             suite.Handler,
		MediaSourceFile:     path.Join(suite.TempDir, "sample.mp4"),
		TargSubFile:         path.Join(suite.TempDir, "sample.ja.srt"),
		NativeSubFile:       path.Join(suite.TempDir, "sample.en.srt"),
		OutputFileExtension: ".tsv",
		Mode:                Subs2Cards,
	}
	
	suite.Ctx = context.Background()
}

func TestCardsSuite(t *testing.T) {
	suite.Run(t, new(FileSystemTestSuite))
}

// Test validateBasicRequirements
func (suite *FileSystemTestSuite) TestValidateBasicRequirements() {
	// Test Case 1: Valid requirements
	suite.Task.Langs = []string{"ja"}
	suite.Handler.On("Log", mock.Anything, mock.Anything, mock.Anything).Return(nil)
	
	err := suite.Task.validateBasicRequirements()
	suite.Nil(err, "Should not return error with valid requirements")
	
	// Test Case 2: Invalid - apostrophe in directory path
	suite.Task.TargSubFile = "/tmp/with'apostrophe/sample.srt"
	suite.Handler.On("Log", Error, AbortTask, mock.Anything).Return(&ProcessingError{Behavior: AbortTask})
	
	err = suite.Task.validateBasicRequirements()
	suite.NotNil(err, "Should return error with apostrophe in path")
	suite.Equal(AbortTask, err.Behavior, "Should abort task with apostrophe in path")
	
	// Test Case 3: Invalid - no languages or subtitle files
	suite.Task.TargSubFile = ""
	suite.Task.Langs = []string{}
	suite.Handler.On("Log", Error, AbortAllTasks, mock.Anything).Return(&ProcessingError{Behavior: AbortAllTasks})
	
	err = suite.Task.validateBasicRequirements()
	suite.NotNil(err, "Should return error with no languages or subtitle files")
	suite.Equal(AbortAllTasks, err.Behavior, "Should abort all tasks with no languages or subtitle files")
}

// Test setupSubtitles
func (suite *FileSystemTestSuite) TestSetupSubtitles() {
	// Mock dependencies
	mockReporter := new(MockReporter)
	mockReporter.On("SaveSnapshot", mock.Anything, mock.Anything).Return()
	mockReporter.On("ClearExecutionRecords").Return()
	mockReporter.On("Record", mock.Anything).Return()
	
	// Create a package variable to temporarily replace crash.Reporter
	origReporter := crash.Reporter
	crash.Reporter = &crash.ReporterInstance{}
	defer func() { crash.Reporter = origReporter }()
	
	// Test Case 1: TargSubFile already set, opens successfully
	suite.Task.TargSubFile = path.Join(suite.TempDir, "sample.ja.srt")
	suite.Task.Langs = []string{"ja"}
	
	// Mock function responses
	suite.Handler.On("ZeroLog").Return(&suite.Handler.logger)
	
	// We'll need to mock the behavior instead of replacing the function
	origOpenFile := subs.OpenFile
	
	// Create a wrapper for openFile that will handle our test cases
	subs.OpenFile = func(path string, clean bool) (*subs.Subtitles, error) {
		mockSubtitles := &astisub.Subtitles{}
		mockSubtitles.Items = []*astisub.Item{{}}
		return &subs.Subtitles{Subtitles: mockSubtitles}, nil
	}
	defer func() { subs.OpenFile = origOpenFile }()
	
	err := suite.Task.setupSubtitles(suite.Ctx, mockReporter)
	suite.Nil(err, "Should not return error when subtitles open successfully")
	suite.NotNil(suite.Task.TargSubs, "Target subtitles should be set")
	
	// Test Case 2: Error opening target subtitle file
	subs.OpenFile = func(path string, clean bool) (*subs.Subtitles, error) {
		return nil, errors.New("failed to open subtitle file")
	}
	
	suite.Handler.On("LogErr", mock.Anything, AbortTask, mock.Anything).
		Return(&ProcessingError{Behavior: AbortTask, Err: errors.New("failed to open subtitle file")})
	
	err = suite.Task.setupSubtitles(suite.Ctx, mockReporter)
	suite.NotNil(err, "Should return error when failing to open subtitle file")
	suite.Equal(AbortTask, err.Behavior, "Should abort task when failing to open subtitle file")
}

// Test prepareOutputDirectory
func (suite *FileSystemTestSuite) TestPrepareOutputDirectory() {
	// Test Case 1: Enhance and Translit modes should return early
	suite.Task.Mode = Enhance
	outStream, err := suite.Task.prepareOutputDirectory()
	suite.Nil(err, "Should not return error for Enhance mode")
	suite.Nil(outStream, "Should not return an outStream for Enhance mode")
	
	suite.Task.Mode = Translit
	outStream, err = suite.Task.prepareOutputDirectory()
	suite.Nil(err, "Should not return error for Translit mode")
	suite.Nil(outStream, "Should not return an outStream for Translit mode")
	
	// Test Case 2: Subs2Cards mode with missing native language
	suite.Task.Mode = Subs2Cards
	suite.Task.Langs = []string{"ja"} // Only one language
	suite.Task.NativeSubFile = ""
	
	// Create valid target subs
	mockSubtitles := &astisub.Subtitles{}
	mockSubtitles.Items = []*astisub.Item{{}}
	suite.Task.TargSubs = &subs.Subtitles{Subtitles: mockSubtitles}
	
	suite.Handler.On("LogErr", mock.AnythingOfType("error"), AbortTask, mock.Anything).
		Return(&ProcessingError{Behavior: AbortTask})
	
	_, err = suite.Task.prepareOutputDirectory()
	suite.NotNil(err, "Should return error with missing native language")
	
	// Reset for the next test
	suite.Handler = new(ExtendedMockHandler)
	suite.Handler.logger = zerolog.New(zerolog.NewTestWriter(suite.T()))
	suite.Task.Handler = suite.Handler
	
	// Test Case 3: Error creating output directory
	suite.Task.Mode = Subs2Cards
	suite.Task.Langs = []string{"ja", "en"}
	suite.Task.TargSubs = &subs.Subtitles{Subtitles: mockSubtitles}
	suite.Task.NativeSubs = &subs.Subtitles{Subtitles: mockSubtitles}
	
	// Mock the native subtitle file opening
	origOpenFile := subs.OpenFile
	
	subs.OpenFile = func(path string, clean bool) (*subs.Subtitles, error) {
		mockSubtitles := &astisub.Subtitles{}
		mockSubtitles.Items = []*astisub.Item{{}}
		return &subs.Subtitles{Subtitles: mockSubtitles}, nil
	}
	defer func() { subs.OpenFile = origOpenFile }()
	
	// Mock os.OpenFile to return an error
	originalOsOpenFile := os.OpenFile
	defer func() { os.OpenFile = originalOsOpenFile }()
	
	os.OpenFile = func(name string, flag int, perm os.FileMode) (*os.File, error) {
		return nil, errors.New("failed to open file")
	}
	
	suite.Handler.On("LogErr", mock.AnythingOfType("error"), AbortTask, mock.Anything).
		Return(&ProcessingError{Behavior: AbortTask})
	
	_, err = suite.Task.prepareOutputDirectory()
	suite.NotNil(err, "Should return error when failing to create output file")
}

// Test processMediaInfo
func (suite *FileSystemTestSuite) TestProcessMediaInfo() {
	// Mock Mediainfo function
	originalMediainfo := Mediainfo
	defer func() { Mediainfo = originalMediainfo }()
	
	// Create a mock MediaInfo
	mockMediaInfo := MediaInfo{
		AudioTracks: []AudioTrack{
			{
				Language: suite.Task.Targ.Language,
				Channels: "2",
				Title:    "",
			},
		},
	}
	
	Mediainfo = func(file string) MediaInfo {
		return mockMediaInfo
	}
	
	// Test Case 1: Translit mode skips audio track selection
	suite.Task.Mode = Translit
	err := suite.Task.processMediaInfo()
	suite.Nil(err, "Should not return error for Translit mode")
	
	// Test Case 2: Normal mode selects audio track
	suite.Task.Mode = Subs2Cards
	suite.Task.UseAudiotrack = -1
	suite.Task.TargetChan = 2
	
	// Mock handler methods
	suite.Handler.On("ZeroLog").Return(&suite.Handler.logger)
	
	err = suite.Task.processMediaInfo()
	suite.Nil(err, "Should not return error for normal case")
	suite.Equal(0, suite.Task.UseAudiotrack, "Should select the first audio track")
	
	// Test Case 3: Error selecting audio track
	mockMediaInfo.AudioTracks[0].Language = nil // Will cause getFirstTrack to return an error
	suite.Task.UseAudiotrack = -1
	
	suite.Handler.On("LogErr", mock.AnythingOfType("error"), AbortAllTasks, mock.Anything).
		Return(&ProcessingError{Behavior: AbortAllTasks})
	
	err = suite.Task.processMediaInfo()
	suite.NotNil(err, "Should return error when failing to select audio track")
}

// Test processClosedCaptions
func (suite *FileSystemTestSuite) TestProcessClosedCaptions() {
	// Test Case 1: Enhance mode skips processing
	suite.Task.Mode = Enhance
	suite.Task.processClosedCaptions()
	// No assertions needed - just ensuring it runs without error
	
	// Test Case 2: Closed captions in file name
	suite.Task.Mode = Subs2Cards
	suite.Task.TargSubFile = "sample.closedcaption.srt"
	mockSubtitles := &astisub.Subtitles{}
	mockSubtitles.Items = []*astisub.Item{{}}
	suite.Task.TargSubs = &subs.Subtitles{Subtitles: mockSubtitles}
	
	// Mock the TrimCC2Dubs method by replacing it temporarily
	methodCalled := false
	originalTrimCC2Dubs := suite.Task.TargSubs.TrimCC2Dubs
	suite.Task.TargSubs.TrimCC2Dubs = func() {
		methodCalled = true
	}
	
	suite.Handler.On("ZeroLog").Return(&suite.Handler.logger)
	
	suite.Task.processClosedCaptions()
	suite.True(methodCalled, "TrimCC2Dubs should be called for closed captions")
	
	// Restore the original method
	suite.Task.TargSubs.TrimCC2Dubs = originalTrimCC2Dubs
}

// Test handleUserConfirmation - This will be a limited test since it involves user interaction
func (suite *FileSystemTestSuite) TestHandleUserConfirmation() {
	// Test Case: No confirmation needed (not CLI)
	suite.Task.IsCCorDubs = true
	suite.Task.STT = "whisper"
	
	suite.Handler.On("IsCLI").Return(false)
	
	err := suite.Task.handleUserConfirmation()
	suite.Nil(err, "Should not return error when no confirmation is needed")
}

// Test processModeSpecific
func (suite *FileSystemTestSuite) TestProcessModeSpecific() {
	// Test Case 1: Mode that doesn't need processing
	suite.Task.Mode = Enhance
	err := suite.Task.processModeSpecific(suite.Ctx, nil)
	suite.Nil(err, "Should not return error for mode that doesn't need processing")
	
	// Test Case 2: Subs2Cards mode with Supervisor error
	suite.Task.Mode = Subs2Cards
	
	// Mock Supervisor function
	originalSupervisor := suite.Task.Supervisor
	suite.Task.Supervisor = func(ctx context.Context, outStream *os.File, write ProcessedItemWriter) *ProcessingError {
		return &ProcessingError{Behavior: AbortTask, Err: errors.New("supervisor error")}
	}
	
	err = suite.Task.processModeSpecific(suite.Ctx, nil)
	suite.NotNil(err, "Should return error when Supervisor returns error")
	suite.Equal(AbortTask, err.Behavior, "Should return the correct error behavior")
	
	// Restore original function
	suite.Task.Supervisor = originalSupervisor
}

// Test processDubtitles
func (suite *FileSystemTestSuite) TestProcessDubtitles() {
	// Test Case 1: No dubtitles needed
	suite.Task.STT = ""
	suite.Task.WantDubs = false
	suite.Task.TargSubFile = "sample.srt"
	
	subsPath, err := suite.Task.processDubtitles(suite.Ctx)
	suite.Nil(err, "Should not return error when no dubtitles needed")
	suite.Equal("sample.srt", subsPath, "Should return the original path")
	
	// Test Case 2: Error creating dubtitles
	suite.Task.STT = "whisper"
	suite.Task.WantDubs = true
	mockSubtitles := &astisub.Subtitles{}
	mockSubtitles.Items = []*astisub.Item{{}}
	suite.Task.TargSubs = &subs.Subtitles{Subtitles: mockSubtitles}
	
	// Mock the Subs2Dubs method
	originalSubs2Dubs := suite.Task.TargSubs.Subs2Dubs
	suite.Task.TargSubs.Subs2Dubs = func(path, sep string) error {
		return errors.New("subs2dubs error")
	}
	
	suite.Handler.On("LogErr", mock.AnythingOfType("error"), AbortTask, mock.Anything).
		Return(&ProcessingError{Behavior: AbortTask})
	
	_, err = suite.Task.processDubtitles(suite.Ctx)
	suite.NotNil(err, "Should return error when Subs2Dubs returns error")
	
	// Restore original method
	suite.Task.TargSubs.Subs2Dubs = originalSubs2Dubs
}

// Test processTransliteration
func (suite *FileSystemTestSuite) TestProcessTransliteration() {
	// Test Case 1: No transliteration needed
	suite.Task.WantTranslit = false
	
	err := suite.Task.processTransliteration(suite.Ctx, "sample.srt")
	suite.Nil(err, "Should not return error when no transliteration needed")
	
	// Test Case 2: Error in transliteration
	suite.Task.WantTranslit = true
	
	// Mock the Transliterate method
	originalTransliterate := suite.Task.Transliterate
	suite.Task.Transliterate = func(ctx context.Context, path string) *ProcessingError {
		return &ProcessingError{Behavior: AbortTask, Err: errors.New("transliterate error")}
	}
	
	err = suite.Task.processTransliteration(suite.Ctx, "sample.srt")
	suite.NotNil(err, "Should return error when Transliterate returns error")
	suite.Equal(AbortTask, err.Behavior, "Should return the correct error behavior")
	
	// Restore original method
	suite.Task.Transliterate = originalTransliterate
}

// Test processAudioEnhancement
func (suite *FileSystemTestSuite) TestProcessAudioEnhancement() {
	// Test Case 1: No enhancement needed
	suite.Task.SeparationLib = ""
	suite.Task.Mode = Subs2Cards
	
	err := suite.Task.processAudioEnhancement(suite.Ctx)
	suite.Nil(err, "Should not return error when no enhancement needed")
	
	// Test Case 2: Enhancement needed but no separation lib specified for Enhance mode
	suite.Task.SeparationLib = ""
	suite.Task.Mode = Enhance
	
	suite.Handler.On("ZeroLog").Return(&suite.Handler.logger)
	
	err = suite.Task.processAudioEnhancement(suite.Ctx)
	suite.Nil(err, "Should not return error, just log a warning")
	
	// Test Case 3: Error in enhancement
	suite.Task.SeparationLib = "demucs"
	
	// Mock the enhance method
	originalEnhance := suite.Task.enhance
	suite.Task.enhance = func(ctx context.Context) *ProcessingError {
		return &ProcessingError{Behavior: AbortTask, Err: errors.New("enhance error")}
	}
	
	err = suite.Task.processAudioEnhancement(suite.Ctx)
	suite.NotNil(err, "Should return error when enhance returns error")
	suite.Equal(AbortTask, err.Behavior, "Should return the correct error behavior")
	
	// Restore original method
	suite.Task.enhance = originalEnhance
}

// Test the main Execute function
func (suite *FileSystemTestSuite) TestExecute() {
	// Mock dependencies
	mockReporter := new(MockReporter)
	mockReporter.On("SaveSnapshot", mock.Anything, mock.Anything).Return()
	mockReporter.On("ClearExecutionRecords").Return()
	mockReporter.On("Record", mock.Anything).Return()
	
	// Create a package variable to temporarily replace crash.Reporter
	origReporter := crash.Reporter
	crash.Reporter = &crash.ReporterInstance{}
	defer func() { crash.Reporter = origReporter }()
	
	// Create a task with mocked methods
	task := &Task{
		Handler:             suite.Handler,
		MediaSourceFile:     path.Join(suite.TempDir, "sample.mp4"),
		TargSubFile:         path.Join(suite.TempDir, "sample.ja.srt"),
		NativeSubFile:       path.Join(suite.TempDir, "sample.en.srt"),
		OutputFileExtension: ".tsv",
		Mode:                Subs2Cards,
		Langs:               []string{"ja", "en"},
	}
	
	// Mock the dependencies
	originalValidateBasicRequirements := task.validateBasicRequirements
	originalSetupSubtitles := task.setupSubtitles
	originalPrepareOutputDirectory := task.prepareOutputDirectory
	originalProcessMediaInfo := task.processMediaInfo
	originalProcessClosedCaptions := task.processClosedCaptions
	originalHandleUserConfirmation := task.handleUserConfirmation
	originalProcessModeSpecific := task.processModeSpecific
	originalProcessDubtitles := task.processDubtitles
	originalProcessTransliteration := task.processTransliteration
	originalProcessAudioEnhancement := task.processAudioEnhancement
	
	// For cleanup
	defer func() {
		task.validateBasicRequirements = originalValidateBasicRequirements
		task.setupSubtitles = originalSetupSubtitles
		task.prepareOutputDirectory = originalPrepareOutputDirectory
		task.processMediaInfo = originalProcessMediaInfo
		task.processClosedCaptions = originalProcessClosedCaptions
		task.handleUserConfirmation = originalHandleUserConfirmation
		task.processModeSpecific = originalProcessModeSpecific
		task.processDubtitles = originalProcessDubtitles
		task.processTransliteration = originalProcessTransliteration
		task.processAudioEnhancement = originalProcessAudioEnhancement
	}()
	
	// Mock the functions to return success
	task.validateBasicRequirements = func() *ProcessingError { return nil }
	task.setupSubtitles = func(ctx context.Context, reporter *crash.ReporterInstance) *ProcessingError { return nil }
	task.prepareOutputDirectory = func() (*os.File, *ProcessingError) { return nil, nil }
	task.processMediaInfo = func() *ProcessingError { return nil }
	task.processClosedCaptions = func() {}
	task.handleUserConfirmation = func() *ProcessingError { return nil }
	task.processModeSpecific = func(ctx context.Context, outStream *os.File) *ProcessingError { return nil }
	task.processDubtitles = func(ctx context.Context) (string, *ProcessingError) { return "sample.srt", nil }
	task.processTransliteration = func(ctx context.Context, subsPath string) *ProcessingError { return nil }
	task.processAudioEnhancement = func(ctx context.Context) *ProcessingError { return nil }
	
	suite.Handler.On("ZeroLog").Return(&suite.Handler.logger)
	
	// Test successful execution
	err := task.Execute(suite.Ctx)
	suite.Nil(err, "Should not return error for successful execution")
	
	// Test with an error in one of the steps
	task.validateBasicRequirements = func() *ProcessingError {
		return &ProcessingError{Behavior: AbortAllTasks, Err: errors.New("validation error")}
	}
	
	err = task.Execute(suite.Ctx)
	suite.NotNil(err, "Should return error when a step fails")
	suite.Equal(AbortAllTasks, err.Behavior, "Should return the correct error behavior")
}

// TestAutosub tests the Autosub function
func TestAutosub(t *testing.T) {
	// Set up mock directory with subtitle files
	tempDir := t.TempDir()
	
	// Create test files
	testFiles := []string{
		"movie.mp4",
		"movie.ja.srt",      // Target subtitle
		"movie.en.srt",      // Native subtitle
		"movie.forced.srt",  // Should be ignored
		"other.ja.srt",      // Wrong prefix, should be ignored
	}
	
	for _, file := range testFiles {
		f, err := os.Create(path.Join(tempDir, file))
		require.NoError(t, err)
		f.Close()
	}
	
	// Create test task
	handler := NewMockHandler()
	task := &Task{
		Handler:         handler,
		MediaSourceFile: path.Join(tempDir, "movie.mp4"),
		Mode:            Subs2Cards,
		Langs:           []string{"ja", "en"},
		Targ:            Lang{Language: nil},
		RefLangs:        []Lang{{Language: nil}},
	}
	
	// Run test
	err := task.Autosub()
	
	// Verify results
	assert.Nil(t, err, "Autosub should not return an error")
	assert.Contains(t, task.TargSubFile, "movie.ja.srt", "Should find the target subtitle file")
	assert.Contains(t, task.NativeSubFile, "movie.en.srt", "Should find the native subtitle file")
}

// Test the utility functions
func TestUtilityFunctions(t *testing.T) {
	// Test outputBase
	task := &Task{
		TargSubFile: "/path/to/movie's.srt",
	}
	assert.Equal(t, "movie s", task.outputBase(), "Should remove apostrophe and extension")
	
	// Test outputFile
	task.MediaSourceFile = "/media/path/video.mp4"
	task.OutputFileExtension = ".tsv"
	assert.Equal(t, "/media/path/movie s.tsv", task.outputFile(), "Should create correct output file path")
	
	// Test mediaOutputDir
	assert.Equal(t, "/media/path/movie s.media", task.mediaOutputDir(), "Should create correct media output directory path")
	
	// Test audioBase
	task.MediaSourceFile = "/media/path/audio.mp3"
	assert.Equal(t, "audio", task.audioBase(), "Should extract base name without extension")
	
	// Test Base2Absolute
	assert.Equal(t, "/dir/file.txt", Base2Absolute("file.txt", "/dir"), "Should create absolute path")
	assert.Equal(t, "", Base2Absolute("", "/dir"), "Should handle empty paths")
	
	// Test langkitMadeDubtitlesMarker
	assert.Equal(t, ".WHISPER", langkitMadeDubtitlesMarker("whisper"), "Should create correct dubtitles marker")
	
	// Test escape
	assert.Equal(t, `"tab	char"`, escape("tab\tchar"), "Should escape tab characters")
	assert.Equal(t, `"new
line"`, escape("new\nline"), "Should escape newline characters")
	assert.Equal(t, `"quote""quote"`, escape(`quote"quote`), "Should escape quote characters")
	assert.Equal(t, "normal", escape("normal"), "Should not escape normal text")
}

// Mock the os.Exit function for testing userConfirmed
func TestUserConfirmed(t *testing.T) {
	// This test is limited since it would require mocking os.Stdin
	// A more complete test would use an interface for user input
	t.Skip("Skipping userConfirmed test as it requires mocking stdin")
}