name: Build langkit

on:
  push:
    branches: [ dev, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ dev, master ]

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  GO_VERSION: '1.23'  # Required by dAppServer/wails-build-action
  NODE_VERSION: '18'
  WAILS_VERSION: 'v2.9.0'  # v2.10+ is problematic per wails-build-action docs

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        build:
          - name: langkit
            platform: linux/amd64
            platform_sanitized: linux-amd64
            os: ubuntu-22.04  # Pinned for stability with Wails v2.9.0
          - name: langkit
            platform: windows/amd64
            platform_sanitized: windows-amd64
            os: windows-latest
          - name: langkit
            platform: darwin/universal
            platform_sanitized: darwin-universal
            os: macos-latest
    
    runs-on: ${{ matrix.build.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive
          
      # Setup build environment
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 10
          
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: wasm32-unknown-unknown
          
      # Install system dependencies
      - name: Install build dependencies
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
          
      # Caching
      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-${{ runner.arch }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-${{ runner.arch }}-go-
            
      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          workspaces: internal/gui/frontend/src/wasm -> target
          
      - name: Cache Node modules
        uses: actions/cache@v4
        with:
          path: internal/gui/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('internal/gui/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Cache wasm-pack binaries
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/.wasm-pack
            ~/Library/Caches/.wasm-pack
            ~/AppData/Local/wasm-pack/cache
          key: ${{ runner.os }}-wasm-pack-bins
          restore-keys: |
            ${{ runner.os }}-wasm-pack-bins
            
      # Install wasm-pack
      - name: Install wasm-pack
        run: |
          echo "Installing wasm-pack (latest version)"
          curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh
        
      # Install WebRPC code generator
      - name: Install webrpc-gen
        run: go install github.com/webrpc/webrpc/cmd/webrpc-gen
        
      # Generate WebRPC code
      - name: Generate WebRPC code
        working-directory: api
        shell: bash
        run: |
          make generate-go
        
      # Build WASM components with your custom inlining process
      - name: Build WebAssembly components
        working-directory: internal/gui/frontend
        shell: bash
        run: |
          pnpm install --frozen-lockfile
          pnpm run build:wasm
          
      # Prepare static assets for production build
      - name: Prepare static assets
        working-directory: internal/gui/frontend
        shell: bash
        run: |
          mkdir -p public
          cp icon/waving-hand.json public/
          
      # Prepare version information
      - name: Prepare version info
        id: version
        shell: bash
        run: |
          # Get version from tag or use 'dev'
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION="${{ github.ref_name }}"
            # Remove 'v' prefix if present
            VERSION="${VERSION#v}"
          else
            VERSION="dev"
          fi
          
          # Get commit SHA (short version)
          COMMIT="${{ github.sha }}"
          COMMIT="${COMMIT:0:7}"
          
          # Get branch name
          if [[ "${{ github.ref_type }}" == "branch" ]]; then
            BRANCH="${{ github.ref_name }}"
          elif [[ "${{ github.ref_type }}" == "tag" ]]; then
            # For tags, try to get the base branch or default to the tag name
            if [[ -n "${{ github.base_ref }}" ]]; then
              BRANCH="${{ github.base_ref }}"
            else
              # Use the tag name itself as branch info
              BRANCH="${{ github.ref_name }}"
            fi
          else
            BRANCH="unknown"
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "COMMIT=$COMMIT" >> $GITHUB_OUTPUT
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          
          echo "Building with version info:"
          echo "  Version: $VERSION"
          echo "  Commit: $COMMIT"
          echo "  Branch: $BRANCH"
          
      # Build CLI binary
      - name: Build CLI
        shell: bash
        run: |
          # Prepare ldflags with version information
          LDFLAGS="-s -w"
          LDFLAGS="$LDFLAGS -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Version=${{ steps.version.outputs.VERSION }}"
          LDFLAGS="$LDFLAGS -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Commit=${{ steps.version.outputs.COMMIT }}"
          LDFLAGS="$LDFLAGS -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Branch=${{ steps.version.outputs.BRANCH }}"
          
          # Let Go detect the architecture on macOS (could be arm64 or amd64)
          if [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "Building CLI for macOS (auto-detecting architecture)"
            # Ensure CGO is enabled for macOS
            export CGO_ENABLED=1
            go build -ldflags="$LDFLAGS" -o langkit-cli ./cmd/cli
          else
            # Explicitly set for Windows and Linux
            export GOOS=${{ runner.os == 'Windows' && 'windows' || 'linux' }}
            export GOARCH=amd64
            # Statically link for Windows to avoid DLL issues
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              export CGO_ENABLED=1
              export CGO_LDFLAGS="-static"
            fi
            
            echo "Building CLI for GOOS=$GOOS GOARCH=$GOARCH"
            go build -ldflags="$LDFLAGS" -o langkit-cli${{ runner.os == 'Windows' && '.exe' || '' }} ./cmd/cli
          fi
          
      # Build GUI with Wails using the action
      - name: Build GUI with Wails (Windows)
        uses: tassa-yoniso-manasi-karoto/wails-build-action@main
        if: runner.os == 'Windows'
        env:
          CGO_ENABLED: 1
          CGO_LDFLAGS: "-static"
        with:
          build-name: ${{ matrix.build.name }}
          build-ldflags: "-s -w -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Version=${{ steps.version.outputs.VERSION }} -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Commit=${{ steps.version.outputs.COMMIT }} -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Branch=${{ steps.version.outputs.BRANCH }}"
          build-platform: ${{ matrix.build.platform }}
          wails-version: ${{ env.WAILS_VERSION }}
          go-version: ${{ env.GO_VERSION }}
          node-version: ${{ env.NODE_VERSION }}
          sign: false
          package: false
          app-working-directory: "."
      - name: Build GUI with Wails (non-Windows)
        uses: tassa-yoniso-manasi-karoto/wails-build-action@main
        if: runner.os != 'Windows'
        with:
          build-name: ${{ matrix.build.name }}
          build-ldflags: "-s -w -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Version=${{ steps.version.outputs.VERSION }} -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Commit=${{ steps.version.outputs.COMMIT }} -X github.com/tassa-yoniso-manasi-karoto/langkit/internal/version.Branch=${{ steps.version.outputs.BRANCH }}"
          build-platform: ${{ matrix.build.platform }}
          wails-version: ${{ env.WAILS_VERSION }}
          go-version: ${{ env.GO_VERSION }}
          node-version: ${{ env.NODE_VERSION }}
          sign: false
          package: false
          app-working-directory: "."
          
      # Debug: Check what was actually built
      - name: Debug - Check build output
        shell: bash
        run: |
          echo "=== Looking for build output ==="
          echo "Current directory: $(pwd)"
          echo "Directory contents:"
          ls -la
          echo ""
          echo "=== Searching for executables ==="
          find . -name "*.exe" -o -name "*.app" -o -name "langkit*" -type f | grep -v node_modules | grep -v ".git" | head -20
          echo ""
          if [ -d "build" ]; then
            echo "=== Build directory structure ==="
            ls -la build/
            if [ -d "build/bin" ]; then
              echo "build/bin contents:"
              ls -la build/bin/
            fi
            if [ -d "build/windows" ]; then
              echo "build/windows contents:"
              ls -la build/windows/
            fi
          fi
          
      # Package both CLI and GUI together
      - name: Package distribution
        shell: bash
        run: |
          set -e  # Exit on error
          
          mkdir -p dist
          
          # Copy and compress CLI binaries with "terminal-only" naming
          if ls langkit-cli* 1> /dev/null 2>&1; then
            if [[ "${{ runner.os }}" == "Windows" ]]; then
              cp langkit-cli.exe "dist/langkit-terminal-only.exe"
              # Create zip archive for Windows terminal-only using PowerShell
              powershell -Command "Compress-Archive -Path 'dist/langkit-terminal-only.exe' -DestinationPath 'dist/langkit-terminal-only-windows.zip' -Force"
              rm dist/langkit-terminal-only.exe  # Remove uncompressed file
            elif [[ "${{ runner.os }}" == "macOS" ]]; then
              cp langkit-cli "dist/langkit-terminal-only-macos"
              # Create zip archive for macOS terminal-only
              cd dist
              zip -j langkit-terminal-only-macos.zip langkit-terminal-only-macos
              rm langkit-terminal-only-macos  # Remove uncompressed file
              cd ..
            else
              cp langkit-cli "dist/langkit-terminal-only-linux"
              # Ensure executable permissions
              chmod +x "dist/langkit-terminal-only-linux"
              # Create tar.xz archive using LZMA compression
              cd dist
              tar -cJf langkit-terminal-only-linux.tar.xz langkit-terminal-only-linux
              rm langkit-terminal-only-linux  # Remove uncompressed file
              cd ..
            fi
          else
            echo "Warning: CLI binary not found"
          fi
          
          # Copy and compress GUI based on platform
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            # Check multiple possible locations for Windows executable
            if ls langkit.exe 1> /dev/null 2>&1; then
              cp langkit.exe "dist/langkit-app.exe"
            elif ls build/bin/langkit.exe 1> /dev/null 2>&1; then
              cp build/bin/langkit.exe "dist/langkit-app.exe"
            elif ls build/bin/langkit 1> /dev/null 2>&1; then
              # Found Windows executable without .exe extension - this is suspicious
              echo "WARNING: Found Windows executable without .exe extension at build/bin/langkit"
              echo "This suggests GOOS/GOARCH were not properly set during build"
              cp build/bin/langkit "dist/langkit-app.exe"
            elif ls build/windows/*.exe 1> /dev/null 2>&1; then
              cp build/windows/*.exe "dist/langkit-app.exe"
            else
              echo "Error: Windows executable not found"
              echo "Searched: ./langkit.exe, build/bin/langkit.exe, build/bin/langkit, build/windows/*.exe"
              exit 1
            fi
            # Create zip archive for Windows using PowerShell
            powershell -Command "Compress-Archive -Path 'dist/langkit-app.exe' -DestinationPath 'dist/langkit-app-windows.zip' -Force"
            rm dist/langkit-app.exe  # Remove uncompressed file
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            # Create a zip of the app bundle
            if ls build/bin/*.app 1> /dev/null 2>&1; then
              cd build/bin
              zip -r ../../dist/langkit-app-macos.zip *.app
              cd ../..
            else
              echo "Error: macOS app bundle not found"
              exit 1
            fi
          else
            # Linux - copy executable with simple platform suffix
            if ls build/bin/langkit 1> /dev/null 2>&1; then
              cp build/bin/langkit "dist/langkit-app-linux"
              # Ensure executable permissions
              chmod +x "dist/langkit-app-linux"
              # Create tar.xz archive using LZMA compression
              cd dist
              tar -cJf langkit-app-linux.tar.xz langkit-app-linux
              rm langkit-app-linux  # Remove uncompressed file
              cd ..
            else
              echo "Error: Linux binaries not found"
              exit 1
            fi
          fi
          
          # Determine version name for README
          VERSION_NAME=""
          if [[ "${{ github.ref_type }}" == "tag" ]]; then
            VERSION_NAME="${{ github.ref_name }}"
          else
            # Use branch name + short SHA for dev builds
            BRANCH_NAME="${{ github.ref_name }}"
            SHORT_SHA="${{ github.sha }}"
            SHORT_SHA="${SHORT_SHA:0:7}"
            VERSION_NAME="dev-${BRANCH_NAME}-${SHORT_SHA}"
          fi
          
          # Create a README for the distribution
          cat > dist/README.txt << EOF
          # langkit ${VERSION_NAME}
          
          ## Requirements:
          - FFmpeg v6 or higher (dev builds preferred)
          - MediaInfo
          - Replicate API token (for some features)
          
          ## Usage:
          CLI: Run langkit-cli (or langkit-cli.exe on Windows)
          GUI: Run langkit (or langkit.exe on Windows)
          
          ## Platform: ${{ matrix.build.platform }}
          Build date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          EOF
          
      # Upload artifacts
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: langkit-${{ matrix.build.platform_sanitized }}-${{ github.sha }}
          path: dist/*
          
  # Create release if this is a tag
  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: langkit-*
          
      - name: Organize release files
        run: |
          # Create directories for each platform
          mkdir -p release-files
          
          # Copy only specific file patterns from artifacts
          for dir in langkit-*/; do
            if [ -d "$dir" ]; then
              # GUI binaries (all compressed)
              [ -f "$dir/langkit-app-windows.zip" ] && cp "$dir/langkit-app-windows.zip" release-files/
              [ -f "$dir/langkit-app-linux.tar.xz" ] && cp "$dir/langkit-app-linux.tar.xz" release-files/
              [ -f "$dir/langkit-app-macos.zip" ] && cp "$dir/langkit-app-macos.zip" release-files/
              
              # Terminal-only binaries (all compressed)
              [ -f "$dir/langkit-terminal-only-windows.zip" ] && cp "$dir/langkit-terminal-only-windows.zip" release-files/
              [ -f "$dir/langkit-terminal-only-linux.tar.xz" ] && cp "$dir/langkit-terminal-only-linux.tar.xz" release-files/
              [ -f "$dir/langkit-terminal-only-macos.zip" ] && cp "$dir/langkit-terminal-only-macos.zip" release-files/
            fi
          done
          
          # List what we have for debugging
          echo "Release files:"
          ls -la release-files/
          
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: release-files/*
          draft: true
          prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'alpha') }}
          generate_release_notes: true
          body: |
            - **Prior to use, please read the "FAQ", "Requirements", and "API Keys" sections of the [README](https://github.com/tassa-yoniso-manasi-karoto/langkit#faq)**
            - All binaries for macOS are provided as-is and are entirely untested.
            
            ##  "Windows protected your PC" popup
            When running for the first time, Windows **may show a blue popup** that says "Windows protected your PC":
            1. Click **"More info"** 
            2. Click **"Run anyway"**

            This is **normal for unsigned software that isn't widely used** and should only happen once.
            
            Langkit also requires **WebView2** but it comes pre-installed with all modern versions of Windows.
            
            ## CLI version (advanced users only)
            
            For automation and scripting in terminal (extract the archive first):
            - Windows: `langkit-terminal-only-windows.zip`
            - Mac: `langkit-terminal-only-macos.zip`
            - Linux: `langkit-terminal-only-linux.tar.xz`
            